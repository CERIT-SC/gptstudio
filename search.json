[{"path":[]},{"path":"/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported repo owner, James Wade. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.1, available https://www.contributor-covenant.org/version/2/1/code_of_conduct.html. Community Impact Guidelines inspired [Mozilla’s code conduct enforcement ladder][https://github.com/mozilla/inclusion]. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to gptstudio","title":"Contributing to gptstudio","text":"outlines propose change gptstudio. based tidyverse team’s contributing guide.","code":""},{"path":"/CONTRIBUTING.html","id":"fixing-typos","dir":"","previous_headings":"","what":"Fixing typos","title":"Contributing to gptstudio","text":"can fix typos, spelling mistakes, grammatical errors documentation directly using GitHub web interface, long changes made source file. generally means ’ll need edit roxygen2 comments .R, .Rd file. can find .R file generates .Rd reading comment first line.","code":""},{"path":"/CONTRIBUTING.html","id":"bigger-changes","dir":"","previous_headings":"","what":"Bigger changes","title":"Contributing to gptstudio","text":"want make bigger change, ’s good idea first file issue make sure someone team agrees ’s needed. Maybe work together! ’ve found bug, please file issue illustrates bug minimal reprex (also help write unit test, needed). aren’t sure create reprex (can tricky gptstudio interactive tools), please just describe issue best can.","code":""},{"path":"/CONTRIBUTING.html","id":"pull-request-process","dir":"","previous_headings":"Bigger changes","what":"Pull request process","title":"Contributing to gptstudio","text":"Fork package clone onto computer. haven’t done , recommend using usethis::create_from_github(\"MichelNivard/gptstudio\", fork = TRUE). Install development dependencies devtools::install_dev_deps(), make sure package passes R CMD check running devtools::check(). R CMD check doesn’t pass cleanly, ’s good idea ask help continuing. Create Git branch pull request (PR). recommend using usethis::pr_init(\"brief-description--change\"). Make changes, commit git, create PR running usethis::pr_push(), following prompts browser. title PR briefly describe change. body PR contain Fixes #issue-number. user-facing changes, add bullet top NEWS.md (.e. just first header). Follow style described https://style.tidyverse.org/news.html.","code":""},{"path":"/CONTRIBUTING.html","id":"code-style","dir":"","previous_headings":"Bigger changes","what":"Code style","title":"Contributing to gptstudio","text":"New code follow tidyverse style guide. can use styler package apply styles, please don’t restyle code nothing PR. use roxygen2, Markdown syntax, documentation. use testthat unit tests. Contributions test cases included easier accept.","code":""},{"path":"/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Contributing to gptstudio","text":"Please note gptstudio project released Contributor Code Conduct. contributing project agree abide terms.","code":""},{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 gptstudio authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/SUPPORT.html","id":null,"dir":"","previous_headings":"","what":"Getting help with gptstudio","title":"Getting help with gptstudio","text":"Thanks using gptstudio! eager excited help. Thank trying package! filing issue, places explore pieces put together make process smooth possible.","code":""},{"path":"/SUPPORT.html","id":"make-a-reprex","dir":"","previous_headings":"","what":"Make a reprex","title":"Getting help with gptstudio","text":"Start making minimal reproducible example using reprex package. haven’t heard used reprex , ’re treat! Seriously, reprex make R-question-asking endeavors easier (pretty insane ROI five ten minutes ’ll take learn ’s ). additional reprex pointers, check Get help! section tidyverse site.","code":""},{"path":"/SUPPORT.html","id":"where-to-ask","dir":"","previous_headings":"","what":"Where to ask?","title":"Getting help with gptstudio","text":"Armed reprex, next step figure ask. ’s bug: ’re right place, file issue. ’s question: sure ’s gptstudio another R question. Please file issue. package grows popularity, may try Posit Community StackOverflow. people answer questions. ’re sure: let community help figure ! problem bug feature request, can easily return report . opening new issue, sure search issues pull requests make sure bug hasn’t reported /already fixed development version. default, search pre-populated :issue :open. can edit qualifiers (e.g. :pr, :closed) needed. example, ’d simply remove :open search issues repo, open closed.","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Michel Nivard. Author, copyright holder. James Wade. Author, maintainer, copyright holder.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Nivard M, Wade J (2023). gptstudio: Use Large Language Models Directly Development Environment. https://github.com/MichelNivard/gptstudio, https://michelnivard.github.io/gptstudio/.","code":"@Manual{,   title = {gptstudio: Use Large Language Models Directly in your Development Environment},   author = {Michel Nivard and James Wade},   year = {2023},   note = {https://github.com/MichelNivard/gptstudio, https://michelnivard.github.io/gptstudio/}, }"},{"path":"/index.html","id":"gptstudio-","dir":"","previous_headings":"","what":"Use Large Language Models Directly in your Development Environment","title":"Use Large Language Models Directly in your Development Environment","text":"goal gptstudio R programmers easily incorporate use large language models (LLMs) project workflows. models appear step change use text knowledge work, carefully consider ethical implications using models. Ethics LLMs (also called Foundation Models) area active discussion. addins, tailored R developers, also see sister package: gpttools","code":""},{"path":"/index.html","id":"install-the-addins-from-this-package","dir":"","previous_headings":"","what":"Install the addins from this package:","title":"Use Large Language Models Directly in your Development Environment","text":"get bug fix use feature development version, can install development version package GitHub.","code":"install.packages(\"gptstudio\") # install.packages(\"pak\") pak::pak(\"MichelNivard/gptstudio\")"},{"path":"/index.html","id":"privacy-notice-for-gptstudio","dir":"","previous_headings":"","what":"Privacy Notice for gptstudio","title":"Use Large Language Models Directly in your Development Environment","text":"privacy notice applicable R package utilizes GPT-3 GPT-3.5 API provided OpenAI. using package, agree adhere privacy terms conditions set OpenAI.","code":""},{"path":"/index.html","id":"data-sharing-with-openai","dir":"","previous_headings":"Privacy Notice for gptstudio","what":"Data Sharing with OpenAI","title":"Use Large Language Models Directly in your Development Environment","text":"using R package, text code highlight/select cursor, prompt enter within built-applications, sent OpenAI part API request. data sharing governed privacy notice, rules, exceptions agreed OpenAI creating account.","code":""},{"path":"/index.html","id":"security-and-data-usage-by-openai","dir":"","previous_headings":"Privacy Notice for gptstudio","what":"Security and Data Usage by OpenAI","title":"Use Large Language Models Directly in your Development Environment","text":"guarantee security data send OpenAI via API, can provide details OpenAI processes uses data. However, OpenAI stated utilize prompts results enhance AI models, outlined terms use. can opt-data usage contacting OpenAI directly making explicit request.","code":""},{"path":"/index.html","id":"limiting-data-sharing","dir":"","previous_headings":"Privacy Notice for gptstudio","what":"Limiting Data Sharing","title":"Use Large Language Models Directly in your Development Environment","text":"R package designed share text code specifically highlight/select include prompt built-applications. elements R environment shared. responsibility ensure accidentally share sensitive data OpenAI. IMPORTANT: maintain privacy data, highlight, include prompt, otherwise upload sensitive data, code, text remain confidential.","code":""},{"path":"/index.html","id":"prerequisites","dir":"","previous_headings":"","what":"Prerequisites","title":"Use Large Language Models Directly in your Development Environment","text":"Make OpenAI account. Create OpenAI API key use package. Set API key Rstudio","code":""},{"path":"/index.html","id":"setting-openai-api-key","dir":"","previous_headings":"Prerequisites","what":"Setting OpenAI API Key","title":"Use Large Language Models Directly in your Development Environment","text":"default, API calls look OPENAI_API_KEY environment variable. want set global environment variable, can use following command, \"<APIKEY>\" replaced actual key: Otherwise, can add key .Renviron file project. following commands open .Renviron editing: can add following line .Renviron (, replace \"<APIKEY>\" actual key): now set API key every time start particular project. Note: using GitHub/Gitlab, forget add .Renviron .gitignore!","code":"Sys.setenv(OPENAI_API_KEY = \"<APIKEY>\") require(usethis) edit_r_environ(scope = \"project\") OPENAI_API_KEY= \"<APIKEY>\")"},{"path":"/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Use Large Language Models Directly in your Development Environment","text":"examples use.","code":""},{"path":"/index.html","id":"chatgpt-in-rstudio","dir":"","previous_headings":"Usage","what":"ChatGPT in RStudio","title":"Use Large Language Models Directly in your Development Environment","text":"Addins > GPTSTUDIO > ChatGPT Type question. Click “Chat” Ask questions","code":""},{"path":"/index.html","id":"provide-your-own-instructions-in-r-r-markdown-or-quarto-files","dir":"","previous_headings":"Usage","what":"Provide your own instructions in R, R Markdown, or Quarto files","title":"Use Large Language Models Directly in your Development Environment","text":"Addins > GPTSTUDIO > ChatGPT Source: Apply edit desire can dream selection code text.","code":""},{"path":"/index.html","id":"spelling-ang-grammar-check","dir":"","previous_headings":"Usage","what":"Spelling ang grammar check","title":"Use Large Language Models Directly in your Development Environment","text":"Addins > GPTSTUDIO > Spelling Grammar: Takes selected text sends OpenAI’s best model instructs return spelling grammar checked version. spelling","code":""},{"path":"/index.html","id":"comment-your-code","dir":"","previous_headings":"Usage","what":"Comment your code:","title":"Use Large Language Models Directly in your Development Environment","text":"Addins > GPTSTUDIO > Comment code: Takes selected text sends OpenAI prompt code specific model work , asks version comment added explaining code line line. add comments code","code":""},{"path":"/index.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Use Large Language Models Directly in your Development Environment","text":"Please note gptstudio project released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":"/reference/addin_chatgpt.html","id":null,"dir":"Reference","previous_headings":"","what":"Run Chat GPT\nRun the Chat GPT Shiny App — addin_chatgpt","title":"Run Chat GPT\nRun the Chat GPT Shiny App — addin_chatgpt","text":"Run Chat GPT Run Chat GPT Shiny App","code":""},{"path":"/reference/addin_chatgpt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run Chat GPT\nRun the Chat GPT Shiny App — addin_chatgpt","text":"","code":"addin_chatgpt()"},{"path":"/reference/addin_chatgpt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run Chat GPT\nRun the Chat GPT Shiny App — addin_chatgpt","text":"function return value.","code":""},{"path":"/reference/addin_chatgpt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run Chat GPT\nRun the Chat GPT Shiny App — addin_chatgpt","text":"","code":"# Call the function as an RStudio addin if (FALSE) addin_chatgpt()"},{"path":"/reference/addin_chatgpt_in_source.html","id":null,"dir":"Reference","previous_headings":"","what":"ChatGPT in Source — addin_chatgpt_in_source","title":"ChatGPT in Source — addin_chatgpt_in_source","text":"Call function Rstudio addin ask GPT improve spelling grammar selected text.","code":""},{"path":"/reference/addin_chatgpt_in_source.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ChatGPT in Source — addin_chatgpt_in_source","text":"","code":"addin_chatgpt_in_source()"},{"path":"/reference/addin_chatgpt_in_source.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ChatGPT in Source — addin_chatgpt_in_source","text":"function return value.","code":""},{"path":"/reference/addin_chatgpt_in_source.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ChatGPT in Source — addin_chatgpt_in_source","text":"","code":"# Select some text in a source file # Then call the function as an RStudio addin if (FALSE) addin_chatgpt_in_source()"},{"path":"/reference/addin_comment_code.html","id":null,"dir":"Reference","previous_headings":"","what":"Comment Code Addin — addin_comment_code","title":"Comment Code Addin — addin_comment_code","text":"Call function Rstudio addin ask GPT add comments code","code":""},{"path":"/reference/addin_comment_code.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Comment Code Addin — addin_comment_code","text":"","code":"addin_comment_code()"},{"path":"/reference/addin_comment_code.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Comment Code Addin — addin_comment_code","text":"function return value.","code":""},{"path":"/reference/addin_comment_code.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Comment Code Addin — addin_comment_code","text":"","code":"# Open a R file in Rstudio # Then call the function as an RStudio addin if (FALSE) addin_comment_code()"},{"path":"/reference/addin_spelling_grammar.html","id":null,"dir":"Reference","previous_headings":"","what":"Spelling and Grammar Addin — addin_spelling_grammar","title":"Spelling and Grammar Addin — addin_spelling_grammar","text":"Call function Rstudio addin ask GPT improve spelling grammar selected text.","code":""},{"path":"/reference/addin_spelling_grammar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Spelling and Grammar Addin — addin_spelling_grammar","text":"","code":"addin_spelling_grammar()"},{"path":"/reference/addin_spelling_grammar.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Spelling and Grammar Addin — addin_spelling_grammar","text":"function return value.","code":""},{"path":"/reference/addin_spelling_grammar.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Spelling and Grammar Addin — addin_spelling_grammar","text":"","code":"# Select some text in Rstudio # Then call the function as an RStudio addin if (FALSE) addin_spelling_grammar()"},{"path":"/reference/check_api.html","id":null,"dir":"Reference","previous_headings":"","what":"Check API setup — check_api","title":"Check API setup — check_api","text":"function checks whether API key provided OPENAI_API_KEY environment variable valid. function re-check API already validated current session.","code":""},{"path":"/reference/check_api.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check API setup — check_api","text":"","code":"check_api()"},{"path":"/reference/check_api.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check API setup — check_api","text":"Nothing returned. API key valid, success message printed. API key invalid, error message printed function aborts.","code":""},{"path":"/reference/check_api.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check API setup — check_api","text":"","code":"# Call the function to check the API key if (FALSE) check_api()"},{"path":"/reference/check_api_connection.html","id":null,"dir":"Reference","previous_headings":"","what":"Check connection to OpenAI's API works — check_api_connection","title":"Check connection to OpenAI's API works — check_api_connection","text":"function checks whether API key provided OPENAI_API_KEY environment variable valid.","code":""},{"path":"/reference/check_api_connection.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check connection to OpenAI's API works — check_api_connection","text":"","code":"check_api_connection(api_key, update_api = TRUE, verbose = FALSE)"},{"path":"/reference/check_api_connection.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check connection to OpenAI's API works — check_api_connection","text":"api_key API key. update_api Whether attempt update api invalid verbose Whether provide information API connection","code":""},{"path":"/reference/check_api_connection.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check connection to OpenAI's API works — check_api_connection","text":"Nothing returned. API key valid, success message printed. API key invalid, error message printed function aborted.","code":""},{"path":"/reference/check_api_connection.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check connection to OpenAI's API works — check_api_connection","text":"","code":"# Call the function with an API key if (FALSE) check_api_connection(\"my_api_key\") # Call the function with an API key and avoid updating the API key if (FALSE) check_api_connection(\"my_api_key\", update_api = FALSE)"},{"path":"/reference/check_api_key.html","id":null,"dir":"Reference","previous_headings":"","what":"Check API key — check_api_key","title":"Check API key — check_api_key","text":"function checks whether API key provided argument correct format.","code":""},{"path":"/reference/check_api_key.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check API key — check_api_key","text":"","code":"check_api_key(api_key, update_api = TRUE)"},{"path":"/reference/check_api_key.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check API key — check_api_key","text":"api_key API key. update_api Whether attempt update api invalid","code":""},{"path":"/reference/check_api_key.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check API key — check_api_key","text":"Nothing returned. API key correct format, success message printed. API key correct format, error message printed function aborts.","code":""},{"path":"/reference/check_api_key.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check API key — check_api_key","text":"","code":"# Call the function with an API key if (FALSE) check_api_key(\"my_api_key\") # Call the function with an API key and avoid updating the API key if (FALSE) check_api_key(\"my_api_key\", update_api = FALSE)"},{"path":"/reference/gpt_chat.html","id":null,"dir":"Reference","previous_headings":"","what":"ChatGPT in RStudio — gpt_chat","title":"ChatGPT in RStudio — gpt_chat","text":"function uses ChatGPT API tailored user-provided style skill level.","code":""},{"path":"/reference/gpt_chat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ChatGPT in RStudio — gpt_chat","text":"","code":"gpt_chat(   query,   history = NULL,   style = getOption(\"gptstudio.code_style\"),   skill = getOption(\"gptstudio.skill\") )"},{"path":"/reference/gpt_chat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ChatGPT in RStudio — gpt_chat","text":"query character string representing question prompt query index . history list previous chat responses style character string indicating preferred coding style, default \"tidyverse\". skill self-described skill level programmer, default \"beginner\"","code":""},{"path":"/reference/gpt_chat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ChatGPT in RStudio — gpt_chat","text":"list containing instructions answering question, context question asked, suggested answer.","code":""},{"path":"/reference/gpt_chat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ChatGPT in RStudio — gpt_chat","text":"","code":"if (FALSE) { # Example 1: Get help with a tidyverse question tidyverse_query <- \"How can I filter rows of a data frame?\" tidyverse_response <- gpt_chat(query = tidyverse_query,                                style = \"tidyverse\",                                skill = \"beginner\") print(tidyverse_response)  # Example 2: Get help with a base R question base_r_query <- \"How can I merge two data frames?\" base_r_response <- gpt_chat(query = base_r_query,                             style = \"base\",                             skill = \"intermediate\") print(base_r_response)  # Example 3: No style preference no_preference_query <- \"What is the best way to handle missing values in R?\" no_preference_response <- gpt_chat(query = no_preference_query,                                    style = \"no preference\",                                    skill = \"advanced\") print(no_preference_response) }"},{"path":"/reference/gpt_chat_in_source.html","id":null,"dir":"Reference","previous_headings":"","what":"ChatGPT in Source — gpt_chat_in_source","title":"ChatGPT in Source — gpt_chat_in_source","text":"Provides functionality gpt_chat() minor modifications give useful output source (.e., *.R) file.","code":""},{"path":"/reference/gpt_chat_in_source.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ChatGPT in Source — gpt_chat_in_source","text":"","code":"gpt_chat_in_source(   history = NULL,   style = getOption(\"gptstudio.code_style\"),   skill = getOption(\"gptstudio.skill\") )"},{"path":"/reference/gpt_chat_in_source.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ChatGPT in Source — gpt_chat_in_source","text":"history list previous chat responses style character string indicating preferred coding style, default \"tidyverse\". skill self-described skill level programmer, default \"beginner\"","code":""},{"path":"/reference/gpt_chat_in_source.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ChatGPT in Source — gpt_chat_in_source","text":"list containing instructions answering question, context question asked, suggested answer.","code":""},{"path":"/reference/gpt_chat_in_source.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ChatGPT in Source — gpt_chat_in_source","text":"","code":"if (FALSE) { # Example 1: Get help with a tidyverse question in a source file # Select the following code comment in RStudio and run gpt_chat_in_source() # How can I filter rows of a data frame? tidyverse_response <- gpt_chat_in_source(style = \"tidyverse\",                                          skill = \"beginner\")  # Example 2: Get help with a base R question in a source file # Select the following code comment in RStudio and run gpt_chat_in_source() # How can I merge two data frames? base_r_response <- gpt_chat_in_source(style = \"base\", skill = \"intermediate\")  # Example 3: No style preference in a source file # Select the following code comment in RStudio and run gpt_chat_in_source() # What is the best way to handle missing values in R? no_preference_response <- gpt_chat_in_source(style = \"no preference\",                                              skill = \"advanced\") }"},{"path":"/reference/gpt_create.html","id":null,"dir":"Reference","previous_headings":"","what":"Use GPT to improve text — gpt_create","title":"Use GPT to improve text — gpt_create","text":"function uses GPT model OpenAI improve spelling grammar selected text current RStudio session.","code":""},{"path":"/reference/gpt_create.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use GPT to improve text — gpt_create","text":"","code":"gpt_create(   model,   temperature,   max_tokens = getOption(\"gptstudio.max_tokens\"),   openai_api_key = Sys.getenv(\"OPENAI_API_KEY\"),   append_text = TRUE )"},{"path":"/reference/gpt_create.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use GPT to improve text — gpt_create","text":"model name GPT model use. temperature parameter controlling randomness GPT model's output. max_tokens Maximum number tokens return (related length response), defaults 500 openai_api_key API key OpenAI API. append_text Add text selection rather replace, default TRUE","code":""},{"path":"/reference/gpt_create.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Use GPT to improve text — gpt_create","text":"Nothing returned. improved text inserted current RStudio session.","code":""},{"path":"/reference/gpt_create.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Use GPT to improve text — gpt_create","text":"","code":"# Call the function as an RStudio addin if (FALSE) {   gpt_create(model = \"text-davinci-002\",              temperature = 0.5,              max_tokens = 100,              openai_api_key = \"my_api_key\") }"},{"path":"/reference/gpt_edit.html","id":null,"dir":"Reference","previous_headings":"","what":"Use GPT to improve text — gpt_edit","title":"Use GPT to improve text — gpt_edit","text":"function uses GPT model OpenAI improve spelling grammar selected text current RStudio session.","code":""},{"path":"/reference/gpt_edit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use GPT to improve text — gpt_edit","text":"","code":"gpt_edit(   model,   instruction,   temperature,   openai_api_key = Sys.getenv(\"OPENAI_API_KEY\"),   append_text = FALSE )"},{"path":"/reference/gpt_edit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use GPT to improve text — gpt_edit","text":"model name GPT model use. instruction Instruction given model improve text. temperature parameter controlling randomness GPT model's output. openai_api_key API key OpenAI API. append_text Add text selection rather replace, defaults FALSE","code":""},{"path":"/reference/gpt_edit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Use GPT to improve text — gpt_edit","text":"Nothing returned. improved text inserted current RStudio session.","code":""},{"path":"/reference/gpt_edit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Use GPT to improve text — gpt_edit","text":"","code":"# Select some text in Rstudio # Then call the function as an RStudio addin if (FALSE) {   gpt_edit(model = \"text-davinci-002\",            instruction = \"Improve spelling and grammar\",            temperature = 0.5,            openai_api_key = \"my_api_key\") }"},{"path":"/reference/gptstudio-package.html","id":null,"dir":"Reference","previous_headings":"","what":"gptstudio: Use Large Language Models Directly in your Development Environment — gptstudio-package","title":"gptstudio: Use Large Language Models Directly in your Development Environment — gptstudio-package","text":"Large language models readily accessible via API. package lowers barrier use API inside development environment. API, see https://platform.openai.com/docs/introduction.","code":""},{"path":[]},{"path":"/reference/gptstudio-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"gptstudio: Use Large Language Models Directly in your Development Environment — gptstudio-package","text":"Maintainer: James Wade github@jameshwade.com (ORCID) [copyright holder] Authors: Michel Nivard m.g.nivard@vu.nl [copyright holder]","code":""},{"path":"/reference/make_chat_history.html","id":null,"dir":"Reference","previous_headings":"","what":"Make Chat History — make_chat_history","title":"Make Chat History — make_chat_history","text":"function processes chat history, filters system messages, formats remaining messages appropriate styling.","code":""},{"path":"/reference/make_chat_history.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make Chat History — make_chat_history","text":"","code":"make_chat_history(history)"},{"path":"/reference/make_chat_history.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make Chat History — make_chat_history","text":"history list chat messages elements containing 'role' 'content'.","code":""},{"path":"/reference/make_chat_history.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make Chat History — make_chat_history","text":"list formatted chat messages styling applied, excluding system messages.","code":""},{"path":"/reference/make_chat_history.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make Chat History — make_chat_history","text":"","code":"chat_history_example <- list(   list(role = \"user\", content = \"Hello, World!\"),   list(role = \"system\", content = \"System message\"),   list(role = \"assistant\", content = \"Hi, how can I help?\") ) make_chat_history(chat_history_example) #> [[1]] #> [[1]][[1]] #> <strong>USER<\/strong> #>  #> [[1]][[2]] #> <p>Hello, World!<\/p> #>  #>  #>  #> [[2]] #> [[2]][[1]] #> <strong>ASSISTANT<\/strong> #>  #> [[2]][[2]] #> <p>Hi, how can I help?<\/p> #>  #>  #>"},{"path":"/reference/openai_create_chat_completion.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate text completions using OpenAI's API for Chat — openai_create_chat_completion","title":"Generate text completions using OpenAI's API for Chat — openai_create_chat_completion","text":"Generate text completions using OpenAI's API Chat","code":""},{"path":"/reference/openai_create_chat_completion.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate text completions using OpenAI's API for Chat — openai_create_chat_completion","text":"","code":"openai_create_chat_completion(   prompt = \"<|endoftext|>\",   model = \"gpt-3.5-turbo\",   openai_api_key = Sys.getenv(\"OPENAI_API_KEY\"),   task = \"chat/completions\" )"},{"path":"/reference/openai_create_chat_completion.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate text completions using OpenAI's API for Chat — openai_create_chat_completion","text":"prompt prompt generating completions model model use generating text openai_api_key API key accessing OpenAI's API. default, function try use OPENAI_API_KEY environment variable. task task specifies API url use, defaults \"completions\" \"chat/completions\" required ChatGPT model.","code":""},{"path":"/reference/openai_create_chat_completion.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate text completions using OpenAI's API for Chat — openai_create_chat_completion","text":"list generated completions information returned API.","code":""},{"path":"/reference/openai_create_chat_completion.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate text completions using OpenAI's API for Chat — openai_create_chat_completion","text":"","code":"if (FALSE) { openai_create_completion(   model = \"text-davinci-002\",   prompt = \"Hello world!\" ) }"},{"path":"/reference/openai_create_completion.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate text completions using OpenAI's API — openai_create_completion","title":"Generate text completions using OpenAI's API — openai_create_completion","text":"Generate text completions using OpenAI's API","code":""},{"path":"/reference/openai_create_completion.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate text completions using OpenAI's API — openai_create_completion","text":"","code":"openai_create_completion(   model = \"text_davinci-003\",   prompt = \"<|endoftext|>\",   suffix = NULL,   max_tokens = 16,   temperature = NULL,   top_p = NULL,   openai_api_key = Sys.getenv(\"OPENAI_API_KEY\"),   task = \"completions\" )"},{"path":"/reference/openai_create_completion.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate text completions using OpenAI's API — openai_create_completion","text":"model model use generating text prompt prompt generating completions suffix suffix generating completions. NULL, suffix used. max_tokens maximum number tokens generate. temperature temperature use generating text (0 1). NULL, default temperature used. recommended specify temperature top_p time. top_p top-p value use generating text (0 1). NULL, default top-p value used. recommended specify temperature top_p time. openai_api_key API key accessing OpenAI's API. default, function try use OPENAI_API_KEY environment variable. task task specifies API url use, defaults \"completions\" \"chat/completions\" required ChatGPT model.","code":""},{"path":"/reference/openai_create_completion.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate text completions using OpenAI's API — openai_create_completion","text":"list generated completions information returned API.","code":""},{"path":"/reference/openai_create_completion.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate text completions using OpenAI's API — openai_create_completion","text":"","code":"if (FALSE) { openai_create_completion(   model = \"text-davinci-002\",   prompt = \"Hello world!\" ) }"},{"path":"/reference/openai_create_edit.html","id":null,"dir":"Reference","previous_headings":"","what":"Create and edit text using OpenAI's API — openai_create_edit","title":"Create and edit text using OpenAI's API — openai_create_edit","text":"Create edit text using OpenAI's API","code":""},{"path":"/reference/openai_create_edit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create and edit text using OpenAI's API — openai_create_edit","text":"","code":"openai_create_edit(   model,   input = \"\\\"\",   instruction,   temperature = NULL,   top_p = NULL,   openai_api_key = Sys.getenv(\"OPENAI_API_KEY\") )"},{"path":"/reference/openai_create_edit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create and edit text using OpenAI's API — openai_create_edit","text":"model model use generating text input input text edit instruction instruction editing text temperature temperature use generating text (0 1). NULL, default temperature used. recommended specify temperature top_p time. top_p top-p value use generating text (0 1). NULL, default top-p value used. recommended specify temperature top_p time. openai_api_key API key accessing OpenAI's API. default, function try use OPENAI_API_KEY environment variable.","code":""},{"path":"/reference/openai_create_edit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create and edit text using OpenAI's API — openai_create_edit","text":"list edited text information returned API.","code":""},{"path":"/reference/openai_create_edit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create and edit text using OpenAI's API — openai_create_edit","text":"","code":"if (FALSE) { openai_create_edit(   model = \"text-davinci-002\",   input = \"Hello world!\",   instruction = \"Capitalize the first letter of each sentence.\" ) }"},{"path":"/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":[]},{"path":"/news/index.html","id":"gptstudio-010","dir":"Changelog","previous_headings":"","what":"gptstudio 0.1.0","title":"gptstudio 0.1.0","text":"CRAN release: 2023-03-20 Added NEWS.md file track changes package.","code":""}]
